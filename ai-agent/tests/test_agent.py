import pytest
import json
from unittest.mock import AsyncMock, patch

from src.agents.workflow_conversation_agent import WorkflowConversationAgent, WorkflowContext


# Sample workflow for testing
SAMPLE_WORKFLOW = {
    "specId": "wf_incidentes",
    "specVersion": 1,
    "tenantId": "luke_123",
    "name": "Gestión de Incidentes",
    "slug": "gestion_incidentes",
    "states": [
        {"slug": "reportado", "name": "Incidente reportado", "type": "initial"},
        {"slug": "en_resolucion", "name": "En resolución", "type": "intermediate"},
        {"slug": "resuelto", "name": "Resuelto", "type": "final"}
    ],
    "actions": [
        {
            "slug": "pasar_a_resolucion",
            "from": "reportado",
            "to": "en_resolucion",
            "requiresForm": False,
            "permission": "pasar_a_resolucion"
        },
        {
            "slug": "resolver_incidencia",
            "from": "en_resolucion",
            "to": "resuelto",
            "requiresForm": True,
            "permission": "resolver_incidencia"
        }
    ],
    "permissions": [
        {"slug": "pasar_a_resolucion"},
        {"slug": "resolver_incidencia"}
    ],
    "automations": []
}


@pytest.fixture
async def test_agent():
    """Create a test agent instance."""
    agent = WorkflowConversationAgent(test_mode=True)
    yield agent
    # Note: WorkflowConversationAgent doesn't have a close() method


@pytest.mark.asyncio
async def test_agent_initialization(test_agent):
    """Test that the agent initializes correctly."""
    assert test_agent.test_mode is True
    assert test_agent.agent is not None
    # Note: WorkflowConversationAgent uses MCP toolsets, not workflow_tools


@pytest.mark.asyncio
async def test_workflow_understanding(test_agent):
    """Test that the agent can understand workflow structure."""
    response, tools_used = await test_agent.chat(
        message="What is this workflow about?",
        workflow_spec=SAMPLE_WORKFLOW
    )

    assert isinstance(response, str)
    assert len(response) > 0
    # In test mode, the response will be generated by TestModel
    assert isinstance(tools_used, list)


@pytest.mark.asyncio
async def test_state_exploration(test_agent):
    """Test asking about specific states."""
    response, tools_used = await test_agent.chat(
        message="What can I do from the reportado state?",
        workflow_spec=SAMPLE_WORKFLOW
    )

    assert isinstance(response, str)
    assert len(response) > 0


@pytest.mark.asyncio
async def test_action_inquiry(test_agent):
    """Test asking about specific actions."""
    response, tools_used = await test_agent.chat(
        message="Tell me about the pasar_a_resolucion action",
        workflow_spec=SAMPLE_WORKFLOW
    )

    assert isinstance(response, str)
    assert len(response) > 0


@pytest.mark.asyncio
async def test_modification_request(test_agent):
    """Test requesting workflow modifications."""
    response, tools_used = await test_agent.chat(
        message="I want to add a new state called 'escalated' before resolution",
        workflow_spec=SAMPLE_WORKFLOW
    )

    assert isinstance(response, str)
    assert len(response) > 0


@pytest.mark.asyncio
async def test_conversation_context():
    """Test conversation with history context."""
    agent = WorkflowConversationAgent(test_mode=True)

    # First question
    response1, _ = await agent.chat(
        message="What states does this workflow have?",
        workflow_spec=SAMPLE_WORKFLOW
    )

    # Follow-up question with context
    conversation_history = f"User: What states does this workflow have?\nAgent: {response1}"
    response2, _ = await agent.chat(
        message="What about the actions?",
        workflow_spec=SAMPLE_WORKFLOW,
        conversation_history=conversation_history
    )

    assert isinstance(response1, str)
    assert isinstance(response2, str)
    assert len(response1) > 0
    assert len(response2) > 0

    # Note: WorkflowConversationAgent doesn't have a close() method


@pytest.mark.asyncio
async def test_error_handling(test_agent):
    """Test error handling with malformed workflow."""
    response, tools_used = await test_agent.chat(
        message="What is this workflow about?",
        workflow_spec={"invalid": "workflow"}
    )

    # Should still provide some response, even with invalid input
    assert isinstance(response, str)
    assert len(response) > 0