services:
  # svc-builder: Workflow JSON DSL Configuration Management
  svc-builder:
    build:
      context: .
      dockerfile: ./svc-builder/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SERVICE_PORT=8000
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./svc-builder/storage:/app/storage
      - ./shared:/app/shared
    networks:
      - chat-agent-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/v1/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server: Protocol Bridge between AI Agent and svc-builder
  mcp-server:
    build:
      context: .
      dockerfile: ./mcp-server/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - MCP_SERVER_PORT=8002
      - SVC_BUILDER_URL=http://svc-builder:8000
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    networks:
      - chat-agent-network
    depends_on:
      svc-builder:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://svc-builder:8000/api/v1/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent: Conversational AI with MCP Integration
  ai-agent:
    build:
      context: .
      dockerfile: ./ai-agent/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_AGENT_PORT=8001
      - AI_MODEL=gemini-2.5-flash-lite
      - MCP_SERVER_URL=http://mcp-server:8002
      - MAX_CONVERSATION_LENGTH=15
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    volumes:
      - ./shared:/app/shared
    networks:
      - chat-agent-network
    depends_on:
      mcp-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/api/v1/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  chat-agent-network:
    driver: bridge

volumes:
  workflow-storage:
    driver: local