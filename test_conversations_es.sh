#!/bin/bash

# Chat Agent PoC - Pruebas de Conversaci√≥n en Espa√±ol
# Prueba dos perfiles de usuario:
# 1. Gerente de Negocios Experimentado
# 2. Usuario Novato Aprendiendo Dise√±o de Flujos

set -e

# Colores para salida
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # Sin Color

# Configuraci√≥n
AI_AGENT_URL="http://localhost:8001"
SVC_BUILDER_URL="http://localhost:8000"
CHAT_ENDPOINT="$AI_AGENT_URL/api/v1/chat"

# Variables globales para seguimiento de conversaciones
GERENTE_CONVERSATION_ID=""
NOVATO_CONVERSATION_ID=""

# Funciones auxiliares
print_header() {
    echo -e "\n${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}\n"
}

print_user() {
    echo -e "${GREEN}üë§ USUARIO ($2):${NC} $1\n"
}

print_ai() {
    echo -e "${PURPLE}ü§ñ AGENTE IA:${NC} $1\n"
}

print_status() {
    echo -e "${YELLOW}üìä ESTADO:${NC} $1\n"
}

print_error() {
    echo -e "${RED}‚ùå ERROR:${NC} $1\n"
}

print_success() {
    echo -e "${GREEN}‚úÖ √âXITO:${NC} $1\n"
}

# Funci√≥n para enviar mensaje al agente IA
send_message() {
    local message="$1"
    local conversation_id="$2"
    local user_type="$3"

    # Construir payload JSON - escapar comillas en el mensaje
    local escaped_message=$(echo "$message" | sed 's/"/\\"/g')
    local json_payload="{\"message\": \"$escaped_message\", \"language\": \"es\""
    if [[ -n "$conversation_id" ]]; then
        json_payload="$json_payload, \"conversation_id\": \"$conversation_id\""
    fi
    json_payload="$json_payload}"

    print_user "$message" "$user_type"

    # Enviar solicitud
    local response=$(curl -s -X POST "$CHAT_ENDPOINT" \
        -H "Content-Type: application/json" \
        -d "$json_payload")

    if [[ $? -ne 0 ]]; then
        print_error "Fall√≥ al enviar mensaje al agente IA"
        return 1
    fi

    # Extraer respuesta y conversation_id
    local ai_response=$(echo "$response" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    print(data.get('response', 'Sin respuesta'))
except:
    print('Error al analizar respuesta')
")

    local new_conversation_id=$(echo "$response" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    print(data.get('conversation_id', ''))
except:
    print('')
")

    local tools_used=$(echo "$response" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    tools = data.get('mcp_tools_used', [])
    if tools:
        print(f'üîß Herramientas usadas: {\", \".join(tools)}')
except:
    pass
")

    print_ai "$ai_response"
    if [[ -n "$tools_used" ]]; then
        echo -e "${CYAN}$tools_used${NC}\n"
    fi

    # Actualizar conversation ID si este es el primer mensaje
    if [[ -z "$conversation_id" ]]; then
        if [[ "$user_type" == "Gerente" ]]; then
            GERENTE_CONVERSATION_ID="$new_conversation_id"
        else
            NOVATO_CONVERSATION_ID="$new_conversation_id"
        fi
    fi

    sleep 2  # Pausa para legibilidad
}

# Funci√≥n para verificar salud de servicios
check_services() {
    print_header "VERIFICANDO SERVICIOS"

    # Verificar AI Agent
    local ai_health=$(curl -s "$AI_AGENT_URL/api/v1/health" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        print_success "Agente IA est√° ejecut√°ndose en puerto 8001"
    else
        print_error "Agente IA no responde en puerto 8001"
        return 1
    fi

    # Verificar svc-builder
    local svc_health=$(curl -s "$SVC_BUILDER_URL/api/v1/health" 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        print_success "svc-builder est√° ejecut√°ndose en puerto 8000"
    else
        print_error "svc-builder no responde en puerto 8000"
        return 1
    fi

    print_status "Todos los servicios est√°n saludables y listos para pruebas"
}

# Funci√≥n para listar flujos existentes
list_workflows() {
    print_header "FLUJOS DE TRABAJO EXISTENTES EN EL SISTEMA"

    local workflows=$(curl -s "$SVC_BUILDER_URL/api/v1/workflows" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    workflows = data.get('workflows', [])
    print(f'Se encontraron {len(workflows)} flujos de trabajo existentes:')
    for wf in workflows:
        print(f'  ‚Ä¢ {wf[\"name\"]} (ID: {wf[\"spec_id\"]})')
    if len(workflows) == 0:
        print('  No se encontraron flujos de trabajo.')
except:
    print('Error al cargar flujos de trabajo')
")

    echo -e "${CYAN}$workflows${NC}\n"
}

# Perfil Gerente de Negocios - Experimentado con requisitos claros
test_gerente_persona() {
    print_header "ESCENARIO 1: GERENTE DE NEGOCIOS EXPERIMENTADO"
    echo -e "${CYAN}Perfil: Mar√≠a, Gerente de Operaciones en una empresa de log√≠stica${NC}"
    echo -e "${CYAN}Contexto: Ella sabe exactamente qu√© proceso quiere automatizar${NC}"
    echo -e "${CYAN}Objetivo: Crear un flujo de trabajo de aprobaci√≥n de presupuestos${NC}\n"

    # Gerente sabe exactamente lo que quiere
    send_message "Hola, necesito crear un flujo de trabajo para nuestro proceso de aprobaci√≥n de presupuestos. Tenemos un procedimiento muy espec√≠fico que todos los presupuestos deben seguir." "" "Gerente"

    send_message "Nuestro proceso de aprobaci√≥n de presupuestos tiene estas etapas: Presupuesto Enviado, Revisi√≥n Financiera, Aprobaci√≥n de Gerencia, Aprobaci√≥n Final, y finalmente Aprobado o Rechazado. ¬øPuedes crear este flujo de trabajo para m√≠?" "$GERENTE_CONVERSATION_ID" "Gerente"

    send_message "S√≠, por favor crea este flujo de trabajo de aprobaci√≥n de presupuestos en el sistema. Lo necesitamos operacional para la pr√≥xima semana." "$GERENTE_CONVERSATION_ID" "Gerente"

    send_message "Perfecto! Ahora tambi√©n necesito un flujo de trabajo para manejo de reclamos de clientes. El proceso es: Reclamo Recibido, Investigaci√≥n, Resoluci√≥n Propuesta, y luego Reclamo Resuelto o Escalado." "$GERENTE_CONVERSATION_ID" "Gerente"

    send_message "Crea el flujo de trabajo de reclamos de clientes tambi√©n, por favor." "$GERENTE_CONVERSATION_ID" "Gerente"

    print_status "Conversaci√≥n de gerente completada - Se crearon flujos de trabajo con requisitos claros"
}

# Perfil Usuario Novato - Aprendiendo y explorando
test_novato_persona() {
    print_header "ESCENARIO 2: USUARIO NOVATO APRENDIENDO DISE√ëO DE FLUJOS"
    echo -e "${CYAN}Perfil: Carlos, Coordinador de Proyectos Junior${NC}"
    echo -e "${CYAN}Contexto: Conoce su trabajo pero no entiende flujos formales${NC}"
    echo -e "${CYAN}Objetivo: Aprender a crear un flujo de gesti√≥n de tareas${NC}\n"

    # Novato comienza con incertidumbre
    send_message "Hola, soy nuevo en esto. Manejo tareas en el trabajo pero no estoy seguro de c√≥mo crear un flujo de trabajo. ¬øPuedes ayudarme?" "" "Novato"

    send_message "Bueno, cuando recibo una nueva tarea, generalmente simplemente empiezo a trabajar en ella. A veces olvido cosas o no s√© qu√© hacer despu√©s. ¬øCrees que un flujo de trabajo podr√≠a ayudarme?" "$NOVATO_CONVERSATION_ID" "Novato"

    send_message "¬°Eso suena √∫til! Entonces para mis tareas, t√≠picamente recibo una solicitud, luego necesito planificarla, trabajar en ella, y entregarla. ¬øEs suficiente para un flujo de trabajo?" "$NOVATO_CONVERSATION_ID" "Novato"

    send_message "Tienes raz√≥n, deber√≠a pensar m√°s en esto. D√©jame pensar... Despu√©s de que recibo una solicitud de tarea, probablemente deber√≠a revisarla primero para entender qu√© se necesita. Luego la planifico, ejecuto el trabajo, reviso todo, y entrego al cliente. ¬øTiene m√°s sentido as√≠?" "$NOVATO_CONVERSATION_ID" "Novato"

    send_message "¬°S√≠, eso suena mucho mejor! ¬øPuedes crear este flujo de trabajo de tareas para m√≠? Me gustar√≠a ver c√≥mo funciona." "$NOVATO_CONVERSATION_ID" "Novato"

    send_message "¬°Esto es genial! Puedo ver c√≥mo esto me ayudar√≠a a mantenerme organizado. ¬øQu√© tal si quisiera agregar un paso para obtener aprobaci√≥n de mi jefe antes de comenzar a trabajar? ¬øPodr√≠a modificar el flujo de trabajo?" "$NOVATO_CONVERSATION_ID" "Novato"

    send_message "S√≠, por favor agrega un paso de aprobaci√≥n del jefe despu√©s de la fase de planificaci√≥n y antes de la ejecuci√≥n." "$NOVATO_CONVERSATION_ID" "Novato"

    print_status "Conversaci√≥n de novato completada - Aprendi√≥ dise√±o de flujos y cre√≥ flujo personalizado"
}

# Funci√≥n para verificar flujos creados
verify_workflows() {
    print_header "VERIFICANDO FLUJOS DE TRABAJO CREADOS"

    local workflows=$(curl -s "$SVC_BUILDER_URL/api/v1/workflows" | python3 -c "
import json, sys
try:
    data = json.load(sys.stdin)
    workflows = data.get('workflows', [])
    new_workflows = []

    # Buscar flujos que probablemente fueron creados durante las pruebas
    expected_names = [
        'presupuesto', 'budget', 'aprobaci√≥n', 'reclamo', 'complaint',
        'claim', 'tarea', 'task', 'gesti√≥n', 'management'
    ]

    for wf in workflows:
        name_lower = wf['name'].lower()
        if any(expected in name_lower for expected in expected_names):
            new_workflows.append(wf)

    print(f'Se encontraron {len(new_workflows)} flujos creados durante las pruebas:')
    for wf in new_workflows:
        print(f'  ‚úÖ {wf[\"name\"]} (ID: {wf[\"spec_id\"]}) - {wf[\"states_count\"]} estados, {wf[\"actions_count\"]} acciones')

    if len(new_workflows) == 0:
        print('‚ùå No se encontraron nuevos flujos - verificar si las conversaciones fueron exitosas')
    else:
        print(f'\\nüéâ ¬°Se crearon exitosamente {len(new_workflows)} flujos a trav√©s de conversaci√≥n!')

except Exception as e:
    print(f'Error al verificar flujos: {e}')
")

    echo -e "${CYAN}$workflows${NC}\n"
}

# Funci√≥n para mostrar an√°lisis de conversaci√≥n
show_analysis() {
    print_header "AN√ÅLISIS DE CONVERSACI√ìN"

    echo -e "${CYAN}üìä COMPARACI√ìN DE ESCENARIOS:${NC}\n"

    echo -e "${GREEN}üëî Gerente de Negocios (Mar√≠a):${NC}"
    echo -e "  ‚Ä¢ Requisitos claros desde el inicio"
    echo -e "  ‚Ä¢ Us√≥ terminolog√≠a de negocios espec√≠fica"
    echo -e "  ‚Ä¢ Solicit√≥ m√∫ltiples flujos eficientemente"
    echo -e "  ‚Ä¢ Estilo de comunicaci√≥n directo"
    echo -e "  ‚Ä¢ Resultado: Flujos completos creados\n"

    echo -e "${BLUE}üéì Usuario Novato (Carlos):${NC}"
    echo -e "  ‚Ä¢ Comenz√≥ con incertidumbre y preguntas"
    echo -e "  ‚Ä¢ Aprendi√≥ conceptos de flujos a trav√©s de conversaci√≥n"
    echo -e "  ‚Ä¢ Mejor√≥ iterativamente el dise√±o del flujo"
    echo -e "  ‚Ä¢ Pidi√≥ modificaciones y mejoras"
    echo -e "  ‚Ä¢ Resultado: Flujo personalizado con experiencia de aprendizaje\n"

    echo -e "${PURPLE}ü§ñ Rendimiento del Agente IA:${NC}"
    echo -e "  ‚Ä¢ Adapt√≥ estilo de comunicaci√≥n al nivel de experiencia del usuario"
    echo -e "  ‚Ä¢ Proporcion√≥ orientaci√≥n al usuario novato"
    echo -e "  ‚Ä¢ Proces√≥ eficientemente requisitos claros del gerente"
    echo -e "  ‚Ä¢ Mantuvo lenguaje de negocios en todo momento"
    echo -e "  ‚Ä¢ Cre√≥ exitosamente flujos en espa√±ol en ambos escenarios\n"
}

# Funci√≥n principal de ejecuci√≥n
main() {
    print_header "CHAT AGENT POC - PRUEBAS DE CONVERSACI√ìN EN ESPA√ëOL"
    echo -e "${CYAN}Probando dos perfiles de usuario con diferentes niveles de experiencia${NC}\n"

    # Verificar si los servicios est√°n ejecut√°ndose
    if ! check_services; then
        print_error "Los servicios no est√°n listos. Por favor ejecuta: docker-compose up -d"
        exit 1
    fi

    # Mostrar flujos existentes
    list_workflows

    # Probar ambos perfiles
    test_gerente_persona
    test_novato_persona

    # Verificar resultados
    verify_workflows

    # Mostrar an√°lisis
    show_analysis

    print_header "PRUEBAS COMPLETADAS"
    print_success "¬°Pruebas de conversaci√≥n completadas exitosamente!"
    echo -e "${YELLOW}üí° CONSEJO:${NC} Puedes ejecutar escenarios individuales llamando:"
    echo -e "  ${CYAN}./test_conversations_es.sh gerente${NC} - Probar solo escenario de gerente"
    echo -e "  ${CYAN}./test_conversations_es.sh novato${NC} - Probar solo escenario de novato"
    echo -e "  ${CYAN}./test_conversations_es.sh verificar${NC} - Solo verificar flujos existentes\n"
}

# Manejar argumentos de l√≠nea de comandos
case "${1:-all}" in
    "gerente")
        check_services && test_gerente_persona
        ;;
    "novato")
        check_services && test_novato_persona
        ;;
    "verificar")
        verify_workflows
        ;;
    "all"|"")
        main
        ;;
    *)
        echo "Uso: $0 [gerente|novato|verificar|all]"
        echo "  gerente   - Probar escenario de gerente de negocios experimentado"
        echo "  novato    - Probar escenario de usuario novato aprendiendo"
        echo "  verificar - Verificar flujos creados"
        echo "  all       - Ejecutar suite completa de pruebas (predeterminado)"
        exit 1
        ;;
esac
